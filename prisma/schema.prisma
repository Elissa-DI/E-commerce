// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
//   provider = "prisma-client-js"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "mongodb"
//   url      = env("DATABASE_URL")
// }

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  role      Role?     @default(CUSTOMER)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @default(now())

  carts Cart[]

  CartItem CartItem[]

  Order Order[]
}

enum Role {
  ADMIN
  CUSTOMER
  GUEST
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Float
  category    String
  stock       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  cartItems CartItem[]
}

model Cart {
  id        String   @id @default(uuid())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User       @relation(fields: [userId], references: [id])
  items CartItem[]
}

model CartItem {
  id        String   @id @default(uuid())
  userId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])
  Cart    Cart[]

  @@unique([userId, productId]) // Composite unique constraint
}

enum OrderStatus {
  PENDING
  COMPLETED
}

model Order {
  id        String      @id @default(uuid())
  userId    String
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id])
}

